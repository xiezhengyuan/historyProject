package com.hxy.isw.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.omg.CORBA.ORBPackage.InconsistentTypeCode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.w3c.dom.css.ElementCSSInlineStyle;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.hxy.isw.entity.AccountInfo;
import com.hxy.isw.entity.Shares;
import com.hxy.isw.service.ManagerService;
import com.hxy.isw.util.ConstantUtil;
import com.hxy.isw.util.DatabaseHelper;
import com.hxy.isw.util.JsonUtil;
@Service
public class ManagerServiceImpl implements ManagerService {
	@Autowired
	DatabaseHelper databaseHelper;
	@Override
	public List<Map<String, Object>> queryAll(Integer start, Integer limit, String type) throws Exception {
		
			String hql ="select s from Shares s where s.type="+type+"";
			List<Object> list =databaseHelper.getResultListByHql(hql,start,limit);
			List<Map<String, Object>> lstmap=new ArrayList<Map<String,Object>>();
			for(Object obj:list){
				Shares s= (Shares)obj;
				Map<String, Object> map= new HashMap<String, Object>();
				map.put("id", s.getId());
				map.put("sharesname", s.getSharesname());
				map.put("code", s.getCode());
				map.put("price", s.getPrice());
				map.put("upanddown", s.getUpanddown());
				map.put("createtime", s.getCreatetime());
				map.put("img", s.getImg());
				if(Integer.parseInt(type)==0){
					map.put("state", 2);
				}else{
					map.put("state", s.getState());
				}
				lstmap.add(map);
			}

		return lstmap;
	}
	@Override
	public int countquerAll(String type) throws Exception {
		String sql ="select count(s.id) from shares s where s.type="+type+"";
		List<Object> lst = databaseHelper.getResultListBySql(sql);
		return lst.get(0)==null?0:Integer.parseInt(lst.get(0).toString());
	}
	@Override
	public Map<String, Object> queryAll2(Integer start, Integer limit, String type) throws Exception {
		Map<String, Object> resultMap=new HashMap<String, Object>();
		List<Map<String, Object>> lstmap=new ArrayList<Map<String,Object>>();
		StringBuffer buffer=new StringBuffer("select count(s.id) from shares s where s.type=").append(type);
		int records=databaseHelper.getSqlCount(buffer.toString());
		int total=ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer buffer1=new StringBuffer("select s from Shares s where s.type=").append(type).append(" order by s.createtime DESC");
			List<Object> lit =databaseHelper.getResultListByHql(buffer1.toString(),start,limit);
			for(Object obj:lit){
				Shares s= (Shares)obj;
				Map<String, Object> map= new HashMap<String, Object>();
				map.put("id", s.getId());
				map.put("sharesname", s.getSharesname());
				map.put("code", s.getCode());
				map.put("price", s.getPrice());
				map.put("upanddown", s.getUpanddown());
				map.put("createtime", s.getCreatetime());
				map.put("img", s.getImg());
				if(Integer.parseInt(type)==0){
					map.put("state", 2);
				}else{
					map.put("state", s.getState());
				}
				lstmap.add(map);
			}
		}
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", lstmap);
		
		return resultMap;
	}
	@Override
	public void modifyState(String id) throws Exception {
		Shares s=(Shares)databaseHelper.getObjectById(Shares.class, Long.parseLong(id));
		if(s.getState()==0){
			s.setState(-1);
		}else if(s.getState()==-1){
			s.setState(0);
		}
		
		databaseHelper.updateObject(s);
		
		
	}
	@Override
	public JsonArray queryPhoto(String id) throws Exception {
		StringBuffer querygoodsphotos = new StringBuffer("select s from Shares s where s.id=").append(id);
			
		List<Object> gpflist = databaseHelper.getResultListByHql(querygoodsphotos.toString());
		
		return JsonUtil.castLst2Arr4Single(gpflist);
	}
	@Override
	public void modifyPhoto(String imgarr, String flag, String id) throws Exception {
		if("false".equals(flag)){
			JsonArray arr	 = (JsonArray) JsonUtil.getJsonParser().parse(imgarr);
			if(arr.size()>0){
				for (JsonElement jsonElement : arr) {
					Shares s =(Shares)databaseHelper.getObjectById(Shares.class, Long.parseLong(id));
					JsonObject jsonObject = jsonElement.getAsJsonObject();
					String url = jsonObject.get("url").getAsString();
					s.setImg(url);
					databaseHelper.updateObject(s);
				}
					
				}
		}
		
	}
	@Override
	public Map<String, Object> queryRecharge(Integer role,AccountInfo acc) throws Exception {
		Map<String, Object> map=new HashMap<String, Object>();
		if(role==2||role==3){//2代表公司
			StringBuffer buffer=new StringBuffer("select IFNULL(SUM(amount),0) from accountinfo a LEFT JOIN (select us.faccountid,u.amount from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d")
.append(" on a.id=d.faccountid where a.fcompanyid=").append(acc.getFcompanyid());
			List<String> list = databaseHelper.getResultListBySql(buffer.toString());
			map.put("money", list.get(0));
			
		}else if(role==4){//4代表经理
			StringBuffer buffer=new StringBuffer("select IFNULL(SUM(g.amount),0) from accountinfo a LEFT JOIN")
.append(" (select a.fparentid ,d.amount from accountinfo a,(select us.faccountid,u.amount from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d where d.faccountid=a.id ) g on a.id=g.fparentid")
.append(" WHERE a.role=4 and a.fcompanyid=").append(acc.getFcompanyid()).append(" and g.fparentid=").append(acc.getId());
			List<String> list = databaseHelper.getResultListBySql(buffer.toString());
			map.put("money", list.get(0));
			
		}else if(role==5){//5代表业务员
		StringBuffer buffer = new StringBuffer("select IFNULL(SUM(d.amount),0) from accountinfo a,(select us.faccountid,u.amount from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d")
				.append(" where a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and a.id=").append(acc.getId());
		List<String> list = databaseHelper.getResultListBySql(buffer.toString());
		map.put("money", list.get(0));
		
		}
		return map;
	}
	@Override

public Map<String, Object> queryRech(Integer start,Integer limit,String gstarttime, String gendtime, String querybyuserinfo, AccountInfo acc)
			throws Exception {
		List<Map<String, Object>> rowList=new ArrayList<Map<String,Object>>();
		Map<String, Object> resultMap=new HashMap<String, Object>();
		int role=acc.getRole();
		StringBuffer buffer=new StringBuffer();
		StringBuffer buffer1=new StringBuffer();
		StringBuffer buffer2=new StringBuffer();
		
		if(gstarttime.length()==0&&gendtime.length()==0){
		
		}else if(gstarttime.length()==0&&gendtime.length()!=0){
			buffer2.append(" and d.createtime <=").append("'").append(gendtime).append("'");
		}else if(gstarttime.length()!=0&&gendtime.length()==0){
			buffer2.append(" and d.createtime >=").append("'").append(gstarttime).append("'");
		}else if(gstarttime.length()!=0&&gendtime.length()!=0){
			buffer2.append(" and d.createtime <=").append("'").append(gendtime).append("'").append(" and d.createtime >=")
			.append("'").append(gstarttime).append("'");
		}
		
		if(role==2||role==3){
			buffer=buffer.append("select count(a.id) from accountinfo a,(select us.name,us.mobile,u.amount,u.createtime,us.faccountid from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d WHERE ")
			.append("a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid())
			.append(" AND d.name LIKE '%").append(querybyuserinfo)
			.append("%'").append(buffer2);
			buffer1=buffer1.append("select d.name,d.mobile,d.amount,d.createtime from accountinfo a,(select us.name,us.mobile,u.amount,u.createtime,us.faccountid from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d WHERE ")
					.append("a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid())
					.append(" AND d.name LIKE '%").append(querybyuserinfo)
					.append("%'").append(buffer2).append(" order by d.createtime DESC");	
		
		}else if(role==4){//4代表经理
			buffer=buffer.append("select count(*) from accountinfo a,(select us.name,us.mobile,u.amount,u.createtime,us.faccountid from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d WHERE ")
					.append("a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and a.fparentid=").append(acc.getId())
					.append(" AND d.name LIKE '%").append(querybyuserinfo)
					.append("%'").append(buffer2);
		    buffer1=buffer1.append("select d.name,d.mobile,d.amount,d.createtime from accountinfo a,(select us.name,us.mobile,u.amount,u.createtime,us.faccountid from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d WHERE ")
							.append("a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and a.fparentid=").append(acc.getId())
							.append(" AND d.name LIKE '%").append(querybyuserinfo)
							.append("%'").append(buffer2).append(" order by d.createtime DESC");	
				
		}else if(role==5){//5代表业务员
			buffer=buffer.append("select count(*) from accountinfo a,(select us.name,us.mobile,u.amount,u.createtime,us.faccountid from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d WHERE ")
					.append("a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and d.faccountid=").append(acc.getId())
					.append(" AND d.name LIKE '%").append(querybyuserinfo)
					.append("%'").append(buffer2);
		    buffer1=buffer1.append("select d.name,d.mobile,d.amount,d.createtime from accountinfo a,(select us.name,us.mobile,u.amount,u.createtime,us.faccountid from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d WHERE ")
							.append("a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and d.faccountid=").append(acc.getId())
							.append(" AND d.name LIKE '%").append(querybyuserinfo)
							.append("%'").append(buffer2).append(" order by d.createtime DESC");
		}
		
		int records=databaseHelper.getSqlCount(buffer.toString());
		int total=ConstantUtil.pages(records, limit);
		if(records>0){
			List<Object[]> list=databaseHelper.getResultListBySql(buffer1.toString(), start, limit);
			for(Object[] obj :list){
				Map<String, Object> map =new HashMap<String, Object>();
				String name=obj[0].toString();
				String mobile=obj[1].toString();
				String amount=obj[2].toString();
				String createtime=obj[3].toString();
				map.put("name",name );
				map.put("mobile",mobile );
				map.put("amount", amount);
				map.put("createtime",createtime);
				rowList.add(map);
			}
		}
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}

	@Override
	public JsonArray queryStatistics(String date, AccountInfo acc) throws Exception {
		int [] montharr= {31,28,31,30,31,30,31,31,30,31,30,31};
		System.out.println(date);
		int year;
		int month;
		if(date.length()==0){
			month = new Date().getMonth()+1;
			year= new Date().getYear()+1900;
		}else{
			String[] s=date.split("-");
			year=Integer.parseInt(s[0]);
			month=Integer.parseInt(s[1]);
		}
		
		int role=acc.getRole();
		List<Map<String,Object>> lstMap = new LinkedList<Map<String,Object>>();
	
		
		for (int i = 1; i <=montharr[month-1] ; i++) {
			StringBuffer buffer =new StringBuffer("");
			if(role==2||role==3){
				buffer=buffer.append("select d.amount from accountinfo a,(select u.amount,us.faccountid,u.createtime from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d where")
						.append(" a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and year(d.createtime) =").append(year)
						.append(" and month(d.createtime) =").append(month).append(" and day(d.createtime) =").append(i);;
				
			
			}else if(role==4){
				buffer=buffer.append("select d.amount from accountinfo a,(select u.amount,us.faccountid,u.createtime from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d where")
						.append(" a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and a.fparentid=").append(acc.getId())
						.append(" and year(d.createtime) =").append(year)
						.append(" and month(d.createtime) =").append(month).append(" and day(d.createtime) =").append(i);;
				
			}else if(role==5){
				buffer=buffer.append("select d.amount from accountinfo a,(select u.amount,us.faccountid,u.createtime from userrecharge u,userinfo us where u.fuserinfoid=us.id and u.paystate=1) d where")
						.append(" a.id=d.faccountid and a.fcompanyid=").append(acc.getFcompanyid()).append(" and d.faccountid=").append(acc.getId())
						.append(" and year(d.createtime) =").append(year)
						.append(" and month(d.createtime) =").append(month).append(" and day(d.createtime) =").append(i);;
				
			}
			System.out.println(buffer);
			Map<String,Object> map = new HashMap<String,Object>();
			List<Object> lst = databaseHelper.getResultListBySql(buffer.toString());
			/*if(lst.size()==0){
				map.put("nums", 0);
			}else{
				map.put("nums", lst.get(0).toString());
			}*/
			map.put("nums", lst==null?"0":lst.size()==0?"0":lst.get(0)==null?"0":lst.get(0).toString());
			map.put("time", i+"日");
			map.put("month", month);
			lstMap.add(map);
			
		}
		String result = new Gson().toJson(lstMap);
		JsonArray jarr = (JsonArray) new JsonParser().parse(result);
		return jarr;
	}


}
