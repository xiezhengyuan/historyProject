package com.hxy.isw.control;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.crypto.Data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.hxy.isw.service.impl.AppServiceUserinfo;
import com.hxy.isw.util.ConstantUtil;
import com.hxy.isw.util.DatabaseHelper;
import com.hxy.isw.util.JsonUtil;

@Controller
@RequestMapping(value="/appServiceUserinfo")
public class AppServiceUserInfoControl {
    
	@Autowired
	AppServiceUserinfo appServiceUserinfo;
	
	@RequestMapping(method = RequestMethod.POST, value = "/querymyinfo")
	public void querymyinfo(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
			Map<String, String> usermap=appServiceUserinfo.querymyinfo(Long.parseLong(userid));
			JsonUtil.objToJson(usermap, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/querymygolds")
	public void querymygolds(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
			double mygolds=appServiceUserinfo.querymygolds(Long.parseLong(userid));
			JsonObject obj = new JsonObject();
			obj.addProperty("mygolds",mygolds);
			response.setContentType("text/json; charset=UTF-8");
			PrintWriter out = response.getWriter();
			out.println(obj.toString());
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/mygoldsdetial")
	public void addmydata(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
		    int start = request.getParameter("page")==null?1:Integer.parseInt(request.getParameter("page"));
			int limit = request.getParameter("rows")==null?ConstantUtil.LIMIT:Integer.parseInt(request.getParameter("rows"));
			List<Map<String,Object>> lstMap = new ArrayList<Map<String,Object>>();
			int records = appServiceUserinfo.countmygoldsdetial(Long.parseLong(userid));
			int total = ConstantUtil.pages(records, limit);
			double maxtotalgolds=appServiceUserinfo.querymaxtotalgolds(Long.parseLong(userid));
			if(records > 0 ){
				lstMap = appServiceUserinfo.mygoldsdetial(Long.parseLong(userid), start, limit);
			}	
			String json = new Gson().toJson(lstMap);
			JsonArray arr = (JsonArray) new JsonParser().parse(json);
			JsonObject obj = new JsonObject();
			obj.addProperty("total",total);
			obj.addProperty("records",records);
			obj.addProperty("maxtotalgolds",maxtotalgolds+"");
			obj.add("rows", arr);
			response.setContentType("text/json; charset=UTF-8");
			PrintWriter out = response.getWriter();
			out.println(obj.toString());
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/mygoldsdetialanddetial")
	public void mygoldsdetialanddetial(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
			String type=request.getParameter("type");
			String time=request.getParameter("time")==null?"":request.getParameter("time");
			String starttime=request.getParameter("starttime")==null?"":request.getParameter("starttime");
			String endtime=request.getParameter("endtime")==null?"":request.getParameter("endtime");
		    int start = request.getParameter("page")==null?1:Integer.parseInt(request.getParameter("page"));
			int limit = request.getParameter("rows")==null?ConstantUtil.LIMIT:Integer.parseInt(request.getParameter("rows"));
			List<Map<String,Object>> lstMap = new ArrayList<Map<String,Object>>();
			int records = appServiceUserinfo.countmygoldsdetialanddetial(Long.parseLong(userid),type,time,starttime,endtime);
			int total = ConstantUtil.pages(records, limit);
			double totalingolds= appServiceUserinfo.totalingolds(Long.parseLong(userid),type,time,starttime,endtime);
			double totaloutgolds= appServiceUserinfo.totaloutgolds(Long.parseLong(userid),type,time,starttime,endtime);
			if(records > 0 ){
				lstMap = appServiceUserinfo.mygoldsdetialanddetial(Long.parseLong(userid),type,time,starttime,endtime, start, limit);
			}	
			String json = new Gson().toJson(lstMap);
			JsonArray arr = (JsonArray) new JsonParser().parse(json);
			JsonObject obj = new JsonObject();
			obj.addProperty("total",total);
			obj.addProperty("records",records);
			obj.addProperty("totalingolds",totalingolds);
			obj.addProperty("totaloutgolds",totaloutgolds);
			obj.add("rows", arr);
			response.setContentType("text/json; charset=UTF-8");
			PrintWriter out = response.getWriter();
			out.println(obj.toString());
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/towithdraw")
	public void towithdraw(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid = request.getParameter("userid");
			Map<String,String> map=appServiceUserinfo.towithdraw(Long.parseLong(userid));
			JsonUtil.objToJson(map, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/withdraw")
	public void withdraw(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid = request.getParameter("userid");
			String withdrawnumber=request.getParameter("withdrawnumber");
			appServiceUserinfo.withdraw(Long.parseLong(userid),Double.parseDouble(withdrawnumber));
			JsonUtil.success2page(response);
		} catch (NullPointerException e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\""+e.getMessage()+"\"}");
			e.printStackTrace();
		} catch (Exception e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\"服务器忙\"}");
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/toexchange")
	public void toexchange(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid = request.getParameter("userid");
			Map<String,String> map=appServiceUserinfo.toexchange(Long.parseLong(userid));
			JsonUtil.objToJson(map, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/exchange")
	public void exchange(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid = request.getParameter("userid");
			String exchangegolds=request.getParameter("exchangegolds");
			appServiceUserinfo.exchange(Long.parseLong(userid),Double.parseDouble(exchangegolds));
			JsonUtil.success2page(response);
		} catch (NullPointerException e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\""+e.getMessage()+"\"}");
			e.printStackTrace();
		} catch (Exception e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\"服务器忙\"}");
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/exchangerecord")
	public void exchangerecord(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
		    int start = request.getParameter("page")==null?1:Integer.parseInt(request.getParameter("page"));
			int limit = request.getParameter("rows")==null?ConstantUtil.LIMIT:Integer.parseInt(request.getParameter("rows"));
			List<Map<String,Object>> lstMap = new ArrayList<Map<String,Object>>();
			int records = appServiceUserinfo.countexchangerecord(Long.parseLong(userid));
			int total = ConstantUtil.pages(records, limit);
			if(records > 0 ){
				lstMap = appServiceUserinfo.exchangerecord(Long.parseLong(userid), start, limit);
			}	
			JsonUtil.listToJson(lstMap, records, total, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/updatamyinfo")
	public void updatamyinfo(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid = request.getParameter("userid");
			String updatatext=request.getParameter("updatatext");
			String type=request.getParameter("type");
			appServiceUserinfo.updatamyinfo(Long.parseLong(userid),updatatext,type);
			JsonUtil.success2page(response);
		} catch (Exception e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\"服务器忙\"}");
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/systemmessage")
	public void systemmessage(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
		    int start = request.getParameter("page")==null?1:Integer.parseInt(request.getParameter("page"));
			int limit = request.getParameter("rows")==null?ConstantUtil.LIMIT:Integer.parseInt(request.getParameter("rows"));
			List<Map<String,Object>> lstMap = new ArrayList<Map<String,Object>>();
			int records = appServiceUserinfo.countsystemmessage(Long.parseLong(userid));
			int total = ConstantUtil.pages(records, limit);
			if(records > 0 ){
				lstMap = appServiceUserinfo.systemmessage(Long.parseLong(userid), start, limit);
			}	
			JsonUtil.listToJson(lstMap, records, total, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/updatamypassword")
	public void updatamypassword(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid = request.getParameter("userid");
			String password=request.getParameter("password");
			String newpassword1=request.getParameter("newpassword1");
			String newpassword2=request.getParameter("newpassword2");
			appServiceUserinfo.updatamypassword(Long.parseLong(userid),password,newpassword1,newpassword2);
			JsonUtil.success2page(response);
		} catch (NullPointerException e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\""+e.getMessage()+"\"}");
			e.printStackTrace();
		} catch (Exception e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\"服务器忙\"}");
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/applyhero")
	public void applyhero(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid = request.getParameter("userid");
			String name=request.getParameter("name");
			String mobile=request.getParameter("mobile");
			String email=request.getParameter("email");
			String bank=request.getParameter("bank");
			String cardno=request.getParameter("cardno");
			String paparno=request.getParameter("paparno");
			String tag=request.getParameter("tag")==null?"0":request.getParameter("tag");
			appServiceUserinfo.applyhero(Long.parseLong(userid), name, mobile, email, bank, cardno, paparno,tag);
			JsonUtil.success2page(response);
		} catch (NullPointerException e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\""+e.getMessage()+"\"}");
		} catch (Exception e) {
			JsonUtil.success2page(response, "{\"op\":\"fail\",\"msg\":\"服务器忙\"}");
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/myagent")
	public void myagent(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
			Map<String, String> map=appServiceUserinfo.myagent(Long.parseLong(userid));
			JsonUtil.objToJson(map, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(method = RequestMethod.POST, value = "/myusers")
	public void myusers(HttpServletRequest request,HttpServletResponse response){
		try {
			String userid=request.getParameter("userid");
		    int start = request.getParameter("page")==null?1:Integer.parseInt(request.getParameter("page"));
			int limit = request.getParameter("rows")==null?ConstantUtil.LIMIT:Integer.parseInt(request.getParameter("rows"));
			List<Map<String,Object>> lstMap = new ArrayList<Map<String,Object>>();
			int records = appServiceUserinfo.countmyusers(Long.parseLong(userid));
			int total = ConstantUtil.pages(records, limit);
			if(records > 0 ){
				lstMap = appServiceUserinfo.myusers(Long.parseLong(userid), start, limit);
			}	
			JsonUtil.listToJson(lstMap, records, total, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
