package com.hxy.isw.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.persistence.criteria.From;

import org.apache.commons.digester.plugins.strategies.FinderFromMethod;
import org.apache.poi.hssf.util.HSSFColor.MAROON;
import org.aspectj.weaver.ltw.LTWWorld;
import org.hibernate.sql.Select;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.googlecode.ehcache.annotations.key.StringCacheKeyGenerator.StringGenerator;
import com.hxy.isw.entity.PostingStyle;
import com.hxy.isw.entity.Postings;
import com.hxy.isw.entity.PostingsComments;
import com.hxy.isw.entity.PostingsPhotos;
import com.hxy.isw.entity.UserInfo;
import com.hxy.isw.service.PostingsService;
import com.hxy.isw.util.ConstantUtil;
import com.hxy.isw.util.DatabaseHelper;
import com.hxy.isw.util.JsonUtil;
import com.sun.jndi.url.iiopname.iiopnameURLContextFactory;
import com.sun.swing.internal.plaf.metal.resources.metal_zh_TW;

@Repository
public class PostingsServiceImpl implements PostingsService {

	@Autowired
	DatabaseHelper databaseHelper;
	@Override
	public Map<String, Object> searchPostings(Integer start, String keyword,Integer limit)throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer =new StringBuffer("select count(*) from (SELECT u.id,u.name,u.mobile,(SELECT COUNT(*) from postings p WHERE p.fuserinfoid=u.id and p.state=0) AS count,")
				.append("(SELECT count(*) from postingscomments ps where ps.fuserinfoid=u.id and ps.state=0) as count1")
				.append(",(select IFNULL(SUM(r.money),0) from postings p,rewardlog r where p.id=r.fpostingsid and p.fuserinfoid=u.id and p.state=0) as breward")
				.append(",(select IFNULL(SUM(r.money),0) from rewardlog r where r.fuserinfoid=u.id) as reward from userinfo u where u.speech=0")
						.append(") m");


		
		Integer records = databaseHelper.getSqlCount(buffer.toString());
		
		int total = ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer buffer1 =new StringBuffer("SELECT u.id,u.name,u.mobile,(SELECT COUNT(*) from postings p WHERE p.fuserinfoid=u.id and p.state=0) AS count,")
					.append("(SELECT count(*) from postingscomments ps where ps.fuserinfoid=u.id and ps.state=0) as count1")
					.append(",((select IFNULL(SUM(r.money),0) from postings p,rewardlog r where p.id=r.fpostingsid and p.fuserinfoid=u.id and p.state=0)+(select IFNULL(SUM(p.reward),0) from postings p where p.fuserinfoid=u.id and p.state=0 )) as breward")
					.append(",(select IFNULL(SUM(r.money),0) from rewardlog r where r.fuserinfoid=u.id) as reward from userinfo u where u.speech=0 and u.name like '%").append(keyword)
					.append("%'");
					List<Object[]> list = databaseHelper.getResultListBySql(buffer1.toString(), start, limit);
					for(Object[] obj:list){
						String id=obj[0].toString();
						String name=obj[1].toString();
						String mobile=obj[2].toString();
						String countpostings=obj[3].toString();
						String comments=obj[4].toString();
						String breward=obj[5].toString();
						String reward=obj[6].toString();
						Map<String, Object> map = new HashMap<String, Object>();
						map.put("id", id);
						map.put("name", name);
						map.put("mobile", mobile);
						map.put("countpostings", countpostings);
						map.put("comments", comments);
						map.put("breward", breward);
						map.put("reward", reward);
						rowList.add(map);
					}
		}
		

		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public void disable(String id)throws Exception {
		UserInfo u = (UserInfo)databaseHelper.getObjectById(UserInfo.class, Long.parseLong(id));
		u.setSpeech(-1);
		u.setCreatetime(new Date());
		databaseHelper.updateObject(u);
		
		
	}
	@Override
	public Map<String, Object> searchTopic(Integer start, String keyword, Integer limit,String fpostingstyleid)throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer = new StringBuffer("SELECT count(*) from (SELECT p.id,p.fuserinfoid,p.postingscontent,p.createtime,")
				.append("(SELECT pp.photourl from postingsphotos pp WHERE pp.fpostingsid=p.id and pp.state=0 LIMIT 1) as url,")
				.append("(SELECT u.name from userinfo u where u.id=p.fuserinfoid) as name,")
				.append("(select IFNULL(SUM(r.money),0) from rewardlog r where r.fpostingsid=p.id) as money")
				.append(" from postings p where p.state=0 and p.fpostingstyleid=").append(fpostingstyleid)
				.append(") m");
		Integer records = databaseHelper.getSqlCount(buffer.toString());
		System.out.println(records);
		int total = ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer buffer1 = new StringBuffer("SELECT p.id,p.fuserinfoid,p.postingscontent,p.createtime,")
					.append("(SELECT GROUP_CONCAT(pp.photourl separator ',') from postingsphotos pp WHERE pp.fpostingsid=p.id and pp.state=0 ) as url,")
					.append("(SELECT u.name from userinfo u where u.id=p.fuserinfoid and u.name like '%").append(keyword).append("%'")
					.append(") as name,")
					.append("(select IFNULL(SUM(r.money),0) from rewardlog r where r.fpostingsid=p.id)+p.reward as money,")
					.append("p.postingstitle")
					.append(" from postings p where p.state=0 and p.fpostingstyleid=").append(fpostingstyleid)
					.append(" order by p.createtime DESC");
			List<Object[]> list = databaseHelper.getResultListBySql(buffer1.toString(), start, limit);
			for(Object[] obj:list){
				String id = obj[0].toString();
				String fuserinfoid = obj[1].toString();
				String postingscontent = obj[2].toString();
				String createtime = obj[3].toString();
				String photourl;
				if(obj[4]==null){
					photourl="";
				}else{
					photourl=obj[4].toString();
				}
				String name;
				if(obj[5]==null){
				name="";	
				}else{
				name=obj[5].toString();
				}
				
				String money = obj[6].toString();
				String postingstitle= obj[7].toString();
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("id",id);
				map.put("postingscontent", postingscontent);
				map.put("createtime", createtime);
				map.put("photourl", photourl);
				map.put("name", name);
				map.put("money", money);
				map.put("postingstitle", postingstitle);
				rowList.add(map);
			}
		}

		
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public void deleteTopic(String id)throws Exception {
		Postings p = (Postings)databaseHelper.getObjectById(Postings.class, Long.parseLong(id));
		p.setState(-1);
		databaseHelper.updateObject(p);
		
	}
	@Override
	public JsonArray queryTopicbyid(String id)throws Exception {
		StringBuffer querygoodsphotos = new StringBuffer("select gp from PostingsPhotos gp where gp.fpostingsid =")
				.append(Long.parseLong(id)).append("and gp.state = 0");
		List<Object> gpflist = databaseHelper.getResultListByHql(querygoodsphotos.toString());
		
		return JsonUtil.castLst2Arr4Single(gpflist);
	/*	Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer1 = new StringBuffer("SELECT p.id,p.fuserinfoid,p.postingscontent,p.createtime,")
				.append("(SELECT GROUP_CONCAT(pp.photourl separator ',') from postingsphotos pp WHERE pp.fpostingsid=p.id and pp.state=0 ) as url,")
				.append("(SELECT u.name from userinfo u where u.id=p.fuserinfoid")
				.append(") as name,")
				.append("(select IFNULL(SUM(r.money),0) from rewardlog r where r.fpostingsid=p.id) as money")
				.append(" from postings p where p.state=0 and p.id=").append(Long.parseLong(id));
		List<Object[]> list = databaseHelper.getResultListBySql(buffer1.toString());
		for(Object[] obj:list){
		String id1 = obj[0].toString();
		String fuserinfoid = obj[1].toString();
		String postingscontent = obj[2].toString();
		String createtime = obj[3].toString();
		String photourl = obj[4].toString();
		String name = obj[5].toString();
		String money = obj[6].toString();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id",id1);
		map.put("postingscontent", postingscontent);
		map.put("createtime", createtime);
		map.put("photourl", photourl);
		map.put("name", name);
		map.put("money", money);
		rowList.add(map);
		System.out.println(photourl);
		}
		
		resultMap.put("rows", rowList);
		
		return resultMap;*/
	}
	@Override
	public Map<String, Object> queryTopicbyid2(String id)throws Exception {
			Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer1 = new StringBuffer("SELECT p.id,p.fuserinfoid,p.postingscontent,p.createtime,")
				.append("(SELECT GROUP_CONCAT(pp.photourl separator ',') from postingsphotos pp WHERE pp.fpostingsid=p.id and pp.state=0 ) as url,")
				.append("(SELECT u.name from userinfo u where u.id=p.fuserinfoid")
				.append(") as name,")
				.append("(select IFNULL(SUM(r.money),0) from rewardlog r where r.fpostingsid=p.id) as money")
				.append(" from postings p where p.state=0 and p.id=").append(Long.parseLong(id));
		List<Object[]> list = databaseHelper.getResultListBySql(buffer1.toString());
		for(Object[] obj:list){
		String id1 = obj[0].toString();
		String fuserinfoid = obj[1].toString();
		String postingscontent = obj[2].toString();
		String createtime = obj[3].toString();
		String photourl;
		if(obj[4]==null){
			photourl="";
		}else{
			photourl = obj[4].toString();	
		}
		
		String name = obj[5].toString();
		String money = obj[6].toString();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id",id1);
		map.put("postingscontent", postingscontent);
		map.put("createtime", createtime);
		map.put("photourl", photourl);
		map.put("name", name);
		map.put("money", money);
		rowList.add(map);
		System.out.println(postingscontent);
		}
		
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public void modifypostings(String imgarr, String flag, String postingscontent,
			String id)throws Exception {
		Postings po=(Postings)databaseHelper.getObjectById(Postings.class, Long.parseLong(id));
		
		po.setPostingscontent(postingscontent);
		databaseHelper.updateObject(po);
		/*if(goodsInfo.getFsubtierid()<=0){
			oldg.setFsubtierid(null);
		}else{
			oldg.setFsubtierid(goodsInfo.getFsubtierid());}
		if(goodsInfo.getFsumcierid()<=0){
			oldg.setFsumcierid(null);
		}else{
			oldg.setFsumcierid(goodsInfo.getFsumcierid());
		}
		*/
		
		
		/*databaseHelper.updateObject(oldg);*/
		
		if("false".equals(flag)){
			StringBuffer querygp= new StringBuffer("select gp from PostingsPhotos gp where gp.state = 0 and gp.fpostingsid =")
					.append(Long.parseLong(id));
			List<Object> gplst = databaseHelper.getResultListByHql(querygp.toString());
			for (Object object : gplst) {
				PostingsPhotos goodsPhotos = (PostingsPhotos)object;
				goodsPhotos.setState(-1);
				databaseHelper.updateObject(goodsPhotos);
				
			
			}
			JsonArray arr	 = (JsonArray) JsonUtil.getJsonParser().parse(imgarr);
			
			/*oldg.setThumbnail(arr.get(0).getAsJsonObject().get("url").getAsString());
			databaseHelper.updateObject(oldg);*/
			if(arr.size()>0){
			for (JsonElement jsonElement : arr) {
				JsonObject jsonObject = jsonElement.getAsJsonObject();
				Long id1 = jsonObject.get("id").getAsLong();
				String url = jsonObject.get("url").getAsString();
				String name = jsonObject.get("name").getAsString();
				
				PostingsPhotos gPhotos = new PostingsPhotos();
				gPhotos.setFpostingsid(Long.parseLong(id));
				gPhotos.setPhotourl(url);
				gPhotos.setCreatetime(new Date());
				gPhotos.setState(0);
				
				databaseHelper.persistObject(gPhotos);
				
				//TODO  通过id找到文件对象  ，将状态置为 1 已引用
				/*String sql = "select f from FileInfo f where f.id ="+id;*/
				/*FileInfo fileInfo = (FileInfo) databaseHelper.getObjectById(FileInfo.class, id);
				if(fileInfo.getState()!=1)
				fileInfo.setState(1);
				databaseHelper.updateObject(fileInfo);*/
			}
		}
		}
		
	}
	@Override
	public Map<String, Object> querybanneruser(Integer start, String keyword, Integer limit)throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer =new StringBuffer("select count(*) from UserInfo u where u.speech=-1");
		int records=0;
		List<Object> lt=databaseHelper.getResultListByHql(buffer.toString());
		if(lt.size()>0){
			records=Integer.parseInt(lt.get(0).toString());
		}
				
		int total = ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer buffer1 =new StringBuffer("select u from UserInfo u where u.speech=-1 and u.name like '%").append(keyword).append("%'");
			List<Object> list =databaseHelper.getResultListByHql(buffer1.toString(),start, limit);
			for(Object obj:list){
				UserInfo u = (UserInfo)obj;
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("id", u.getId());
				map.put("name",u.getName() );
				map.put("mobile",u.getMobile() );
				map.put("createtime",u.getCreatetime() );
				rowList.add(map);
			}
		}
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public void relievebanner(String id)throws Exception {
		UserInfo u = (UserInfo)databaseHelper.getObjectById(UserInfo.class, Long.parseLong(id));
		u.setSpeech(0);
		databaseHelper.updateObject(u);
		
		
	}
	@Override
	public void addpostings(String imgarr, String flag, String postingscontent, String id, String praise, String rewrad,
			String share,String title,String fpostingstyleid)throws Exception {
		Postings po=new Postings();
		po.setFpostingstyleid(Long.parseLong(fpostingstyleid));	
		po.setFuserinfoid(Long.parseLong(id));
		po.setPostingscontent(postingscontent);
		po.setPostingstitle(title);
		if(rewrad==null||rewrad.isEmpty())
			rewrad="0";
		
		po.setReward(Integer.parseInt(rewrad));
		if(praise==null||praise.isEmpty())
			praise="0";
		
		po.setPraise(Integer.parseInt(praise));
		if(share==null||share.isEmpty())
			share="0";
		
		po.setShare(Integer.parseInt(share));
		po.setState(0);
		po.setCreatetime(new Date());
		
		databaseHelper.persistObject(po);
		
		
		/*if("false".equals(flag)){
			StringBuffer querygp= new StringBuffer("select gp from PostingsPhotos gp where gp.state = 0 and gp.fpostingsid =")
					.append(Long.parseLong(id));
			List<Object> gplst = databaseHelper.getResultListByHql(querygp.toString());
			for (Object object : gplst) {
				PostingsPhotos goodsPhotos = (PostingsPhotos)object;
				goodsPhotos.setState(-1);
				databaseHelper.updateObject(goodsPhotos);
				
			}*/
			Long  postId=po.getId();
			JsonArray arr	 = (JsonArray) JsonUtil.getJsonParser().parse(imgarr);
			
			/*oldg.setThumbnail(arr.get(0).getAsJsonObject().get("url").getAsString());
			databaseHelper.updateObject(oldg);*/
			for (JsonElement jsonElement : arr) {
				JsonObject jsonObject = jsonElement.getAsJsonObject();
				Long id1 = jsonObject.get("id").getAsLong();
				String url = jsonObject.get("url").getAsString();
				String name = jsonObject.get("name").getAsString();
				
				PostingsPhotos gPhotos = new PostingsPhotos();
				//gPhotos.setFpostingsid(Long.parseLong(id));
				gPhotos.setPhotourl(url);
				gPhotos.setCreatetime(new Date());
				gPhotos.setState(0);
				gPhotos.setFpostingsid(postId);
				
				databaseHelper.persistObject(gPhotos);
				
				//TODO  通过id找到文件对象  ，将状态置为 1 已引用
				/*String sql = "select f from FileInfo f where f.id ="+id;*/
				/*FileInfo fileInfo = (FileInfo) databaseHelper.getObjectById(FileInfo.class, id);
				if(fileInfo.getState()!=1)
				fileInfo.setState(1);
				databaseHelper.updateObject(fileInfo);*/
			}
		}
	@Override
	public Map<String, Object> querycomment(Integer start, String keyword, Integer limit,String id)throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer =new StringBuffer("select count(*) from PostingsComments p where p.state=0 and p.fpostingsid=").append(id);
		/*StringBuffer buffer =new StringBuffer("select count(*) from PostingsComments pc,Postings p where pc.fpostingsid in (select p.id from Postings where p.state=0) and pc.state=0");*/
		List<Object> lt=databaseHelper.getResultListByHql(buffer.toString());
		int records=0;
		if(lt.size()>0){
			records=Integer.parseInt(lt.get(0).toString());
		}
		
		int total=ConstantUtil.pages(records, limit);
		if(records>0){
			/*StringBuffer buffer1 =new StringBuffer("select pc,p from PostingsComments pc,Postings p where pc.fpostingsid in (select p.id from Postings where p.state=0) and pc.state=0 and pc.comment like '%")
					.append(keyword).append("%'");*/
			StringBuffer buffer1 =new StringBuffer("select p from PostingsComments p where p.state=0 and p.fpostingsid=").append(id);
			List<Object> list =databaseHelper.getResultListByHql(buffer1.toString(),start,limit);
			for(Object obj:list){
				PostingsComments pc =(PostingsComments)obj;
				/*Postings p =(Postings)obj[1];*/
				StringBuffer buffer2 = new StringBuffer("select u.name from UserInfo u where u.id=").append(pc.getFuserinfoid());
				String name = databaseHelper.getResultListByHql(buffer2.toString()).get(0).toString();
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("id", pc.getId());	
				/*map.put("postingstitle", p.getPostingstitle());*/
				map.put("name", name);
				map.put("comment", pc.getComment());
				map.put("createtime", pc.getCreatetime());
				rowList.add(map);
			}
			
		}
		/*StringBuffer buffer = new StringBuffer("select count(pc.id) from PostingsComments pc,Postings p,UserInfo u where pc.fpostingsid in (select p.id from Postings where p.fuserinfoid=1) and p.fuserinfoid=1 and u.id in")
				.append("(select pc.fuserinfoid from PostingsComments pc,Postings p where p.fuserinfoid=1 and pc.fpostingsid=p.id)");
				
		int records = Integer.parseInt(databaseHelper.getResultListByHql(buffer.toString()).get(0).toString());
		int total=ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer buffer1 = new StringBuffer("select pc,p,u from PostingsComments pc,Postings p,UserInfo u where pc.fpostingsid in (select p.id from Postings where p.fuserinfoid=1) and u.id in")
					.append("(select pc.fuserinfoid from PostingsComments pc,Postings p where p.fuserinfoid=1 and pc.fpostingsid=p.id)");
					
			List<Object[]> list=databaseHelper.getResultListByHql(buffer1.toString());
			for(Object[] obj:list){
				PostingsComments pc =(PostingsComments)obj[0];
				Postings p =(Postings)obj[1];
				UserInfo u = (UserInfo)obj[2];
				Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", pc.getId());	
			map.put("postingstitle", p.getPostingstitle());
			map.put("name", u.getName());
			map.put("comment", pc.getComment());
			map.put("createtime", pc.getCreatetime());
			rowList.add(map);
			}
			
		}
		
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;*/
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public void deleteComment(String id)throws Exception {
		PostingsComments p =(PostingsComments)databaseHelper.getObjectById(PostingsComments.class, Long.parseLong(id));
		p.setState(-1);
		databaseHelper.updateObject(p);
		
	}
	@Override
	public Map<String, Object> querycommentbyid(String id)throws Exception {
		StringBuffer buffer = new StringBuffer("select p.comment from PostingsComments p where p.id=").append(Long.parseLong(id));
		Map<String, Object> map = new HashMap<String, Object>();
		String name=databaseHelper.getResultListByHql(buffer.toString()).get(0).toString();
		map.put("name", name);
		return map;
	}
	@Override
	public void modifypostingcoment(String postingscontent, String id)throws Exception {
		
		PostingsComments p = (PostingsComments)databaseHelper.getObjectById(PostingsComments.class, Long.parseLong(id));
		p.setComment(postingscontent);
		databaseHelper.updateObject(p);
		
	}
	@Override
	public JsonArray queryPostingStyle() {
		StringBuffer buffer =new StringBuffer("select p from PostingStyle p");
		List<Object> lst = databaseHelper.getResultListByHql(buffer.toString());
		return JsonUtil.castLst2Arr4SingleTime(lst);
	}
	@Override
	public Map<String, Object> queryStyle(Integer start, Integer limit) throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer =new StringBuffer("select count(*) from postingstyle p where p.state=0");
		int records = databaseHelper.getSqlCount(buffer.toString());
		int total=ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer buffer1 =new StringBuffer("select p from PostingStyle p where p.state=0")
					.append(" order by p.createtime DESC");
			List<Object> list =databaseHelper.getResultListByHql(buffer1.toString(), start, limit);
			for(Object obj:list){
				PostingStyle p =(PostingStyle)obj;
				Map<String, Object> map =new HashMap<String, Object>();
				map.put("id", p.getId());
				map.put("name", p.getName());
				map.put("createtime", p.getCreatetime());
				rowList.add(map);
			}
			
			
		}
		
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
		
	}
	@Override
	public void deleteStyle(String id) throws Exception {
		PostingStyle p =(PostingStyle) databaseHelper.getObjectById(PostingStyle.class, Long.parseLong(id));
		p.setState(-1);
		databaseHelper.updateObject(p);
	}
	@Override
	public Map<String, Object> addStyle(String name) throws Exception {
		StringBuffer buffer=new StringBuffer("select p.name from PostingStyle p where p.state=0 and p.name='").append(name).append("'");
		Map<String, Object> map=new HashMap<String, Object>();
		List<String> list =databaseHelper.getResultListByHql(buffer.toString());
		System.out.println(buffer);
		if(list.size()>0){
			
			map.put("op","改名称已存在");
			return map;
		}
			PostingStyle p= new PostingStyle();
			p.setName(name);
			p.setState(0);
			p.setCreatetime(new Date());
			databaseHelper.persistObject(p);
			
		
	
		
		map.put("op", "保存成功");
		return map;
		
	}
	@Override
	public Map<String, Object> queryStyleById(String id) throws Exception {
		StringBuffer buffer = new StringBuffer("select p.name from PostingStyle p where p.state=0 and p.id=").append(id)
				;
		List<String> list =databaseHelper.getResultListByHql(buffer.toString());
		String name =list.get(0);
		Map<String, Object> map=new HashMap<String, Object>();
		map.put("name", name);
		return map;
	}
	@Override
	public void modifypostingStyle(String name, String id) throws Exception {
		// TODO Auto-generated method stub
		PostingStyle p =(PostingStyle)databaseHelper.getObjectById(PostingStyle.class, Long.parseLong(id));
		p.setName(name);
		databaseHelper.updateObject(p);
		
	}
		
	


}	
