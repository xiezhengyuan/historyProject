package com.hxy.isw.service.impl;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.internal.adaptor.LocationHelper;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.google.gson.JsonArray;
import com.hxy.isw.entity.AccountInfo;
import com.hxy.isw.entity.Notice;
import com.hxy.isw.service.NoticService;
import com.hxy.isw.util.ConstantUtil;
import com.hxy.isw.util.DatabaseHelper;
import com.hxy.isw.util.JsonUtil;
@Repository
public class NoticServiceImpl implements NoticService {
	@Autowired
	DatabaseHelper databaseHelper;
	@Override
	public Map<String, Object> queryhnotice(Integer start, String keyword, Integer limit,AccountInfo acc) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date=sdf.format(new Date());
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		int role=acc.getRole();
		int records;
		int total;
		if(role==0||role==1){
			StringBuffer buffer=new StringBuffer("select count(*) from notice n where n.state<>2 and n.sendtime<='").append(date).append("'");
			 records=databaseHelper.getSqlCount(buffer.toString());
	/*		int records =Integer.parseInt(databaseHelper.getResultListByHql(buffer.toString()).get(0).toString());
	*/		 total = ConstantUtil.pages(records, limit);
			
			if(records>0){
				StringBuffer buffer1=new StringBuffer("select n.* from notice n where n.state<>2 and n.sendtime<='" ).append(date)
						.append("' and n.noticename like '%").append(keyword).append("%'");
						
				List<Object[]> lit = databaseHelper.getResultListBySql(buffer1.toString(), start, limit);
				for(Object[] obj:lit){
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("id",obj[0].toString());
					map.put("target", ConstantUtil.noticestate[Integer.parseInt(obj[1].toString())]);
					map.put("noticename", obj[3].toString());
					map.put("noticecontent", obj[4]);
					map.put("createtime", obj[6].toString());
					map.put("sendtime",obj[7].toString());
					map.put("state", ConstantUtil.noticestate1[Integer.parseInt(obj[5].toString())==-1?1:Integer.parseInt(obj[5].toString())]);
					rowList.add(map);
				}
				
				
			}
		}else if(role==2||role==3||role==4||role==5){
			StringBuffer buffer=new StringBuffer("select count(*) from notice n where n.state<>2 and "
					+ "(n.target=0 or n.target=1 or n.target=2 or n.fcompanyid=").append(acc.getFcompanyid()).append(")")
					.append( " and n.sendtime<='").append(date).append("'");
			records=databaseHelper.getSqlCount(buffer.toString());
	/*		int records =Integer.parseInt(databaseHelper.getResultListByHql(buffer.toString()).get(0).toString());
	*/		 total = ConstantUtil.pages(records, limit);
			
			if(records>0){
				StringBuffer buffer1=new StringBuffer("select n.* from notice n where n.state<>2 and "
						+ "(n.target=0 or n.target=1 or n.target=2 or n.fcompanyid=").append(acc.getFcompanyid()).append(")")
						.append( " and n.sendtime<='").append(date).append("'");
						
				List<Object[]> lit = databaseHelper.getResultListBySql(buffer1.toString(), start, limit);
				for(Object[] obj:lit){
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("id",obj[0].toString());
					map.put("target", ConstantUtil.noticestate[Integer.parseInt(obj[1].toString())]);
					map.put("noticename", obj[3].toString());
					map.put("noticecontent", obj[4]);
					map.put("createtime", obj[6].toString());
					map.put("sendtime",obj[7].toString());
					map.put("state", ConstantUtil.noticestate1[Integer.parseInt(obj[5].toString())==-1?1:Integer.parseInt(obj[5].toString())]);
					rowList.add(map);
				}
				
				
			}
		}else {
			total=0;
			records=0;
		}
		
		
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public void addhnotice(String noticecontent, String target, String noticename,String array) {
		
		if(Integer.parseInt(target)==3){
			String[] a=array.split(",");
			//JSONArray array1= new JSONArray(array);
			for(int j = 1; j < a.length; j++){
			//JSONObject obj = array1.getJSONObject(j);
			
			Notice n = new Notice();
			n.setFcompanyid(Long.parseLong(a[j]));
			n.setTarget(Integer.parseInt(target));
			n.setNoticename(noticename);
			n.setNoticecontent(noticecontent);
			n.setState(0);
			n.setCreatetime(new Date());
			n.setSendtime(new Date());
			databaseHelper.persistObject(n);
			}
			
		}else{
			Notice n = new Notice();
			n.setTarget(Integer.parseInt(target));
			n.setNoticename(noticename);
			n.setNoticecontent(noticecontent);
			n.setState(0);
			n.setCreatetime(new Date());
			n.setSendtime(new Date());
			databaseHelper.persistObject(n);
		}
		
		
	}
	@Override
	public Map<String, Object> querywaitnotic(Integer start, String keyword, Integer limit) {
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer=new StringBuffer("select count(*) from Notice n where n.state=1 ");
		int records =Integer.parseInt(databaseHelper.getResultListByHql(buffer.toString()).get(0).toString());
		int total = ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer buffer1=new StringBuffer("select n from Notice n where n.state=1 and n.noticename like '%").append(keyword).append("%'");
			List<Object> lit = databaseHelper.getResultListByHql(buffer1.toString());
			for(Object obj:lit){
				Notice n = (Notice)obj;
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("id",n.getId());
				map.put("target", ConstantUtil.noticestate[n.getTarget()]);
				map.put("noticename", n.getNoticename());
				map.put("noticecontent", n.getNoticecontent());
				map.put("createtime", n.getCreatetime());
				map.put("sendtime", n.getSendtime());
				map.put("state", ConstantUtil.noticestate1[n.getState()]);
				rowList.add(map);
			}
			
			
		}
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public void deletewaitnotic(String id) {
		 Notice n =(Notice)databaseHelper.getObjectById(Notice.class, Long.parseLong(id));
		 n.setState(2);
		 databaseHelper.updateObject(n);
		
	}
	@Override
	public Map<String, Object> querywaitnoticbyid(String id) {
		StringBuffer buffer =new StringBuffer("select n from Notice n where n.id=").append(Long.parseLong(id));
		List<Object> list = databaseHelper.getResultListByHql(buffer.toString());
		Notice n = (Notice)list.get(0);
		Map<String, Object> map =new HashMap<String, Object>();
		map.put("noticename", n.getNoticename());
		map.put("noticecontent", n.getNoticecontent());
		
		return map;
	}
	@Override
	public void savewaitnotice(String id, String noticename, String noticecontent) {
		Notice n =(Notice)databaseHelper.getObjectById(Notice.class, Long.parseLong(id));
		n.setNoticename(noticename);
		n.setNoticecontent(noticecontent);
		databaseHelper.updateObject(n);
		
	}
	@Override
	public JsonArray querycompony() {
		StringBuffer buffer =new StringBuffer("select c from Company c");
		List<Object> lst = databaseHelper.getResultListByHql(buffer.toString());
		return JsonUtil.castLst2Arr4SingleTime(lst);
		/*Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer =new StringBuffer("select c from Company c");
		List<Object> list = databaseHelper.getResultListByHql(buffer.toString());
		for(Object obj:list){
			Company cm= (Company)obj;
			Map<String, Object> map =new HashMap<String, Object>();
			map.put("id", cm.getId());
			map.put("company", cm.getCompany());
			rowList.add(map);
		}
		resultMap.put("rows", rowList);
		return resultMap;*/
	}
	@Override
	public void addtimnotice(String noticecontent, String target, String noticename, String array, String sendtime) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
		Date date = sdf.parse(sendtime);
		System.out.println("qq======="+date);
		if(Integer.parseInt(target)==3){
			String[] a=array.split(",");
			//JSONArray array1= new JSONArray(array);
			for(int j = 1; j < a.length; j++){
			//JSONObject obj = array1.getJSONObject(j);
			
			
			Notice n = new Notice();
			n.setSendtime(date);
			n.setFcompanyid(Long.parseLong(a[j]));
			n.setTarget(Integer.parseInt(target));
			n.setNoticename(noticename);
			n.setNoticecontent(noticecontent);
			n.setState(1);
			n.setCreatetime(new Date());
			
			databaseHelper.persistObject(n);
			}
			
		}else{
			
			Notice n = new Notice();
			n.setSendtime(date);
			n.setTarget(Integer.parseInt(target));
			n.setNoticename(noticename);
			n.setNoticecontent(noticecontent);
			n.setState(1);
			n.setCreatetime(new Date());
		
			databaseHelper.persistObject(n);
		}
		
	}
	@Override
	public Map<String, Object> queryNoticeById(String id) throws Exception {
		Notice n =(Notice)databaseHelper.getObjectById(Notice.class, Long.parseLong(id));
		Map<String, Object> map =new HashMap<String, Object>();
		map.put("detail", n.getNoticecontent());
		return map;
	}
	
	
}
