package com.hxy.isw.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.hxy.isw.entity.MachineInfo;
import com.hxy.isw.entity.MachineUsed;
import com.hxy.isw.entity.MachineUserMark;
import com.hxy.isw.entity.ToysInfo;
import com.hxy.isw.entity.UserInfo;
import com.hxy.isw.service.AppServiceMachine;
import com.hxy.isw.util.ConstantUtil;
import com.hxy.isw.util.DatabaseHelper;
import com.hxy.isw.util.JsonUtil;

@Repository
public class AppServiceMachineImpl implements AppServiceMachine{
	@Autowired
	DatabaseHelper databaseHelper;
	
	@Override
	public String machines(String userid, String toystypeid, String orderby, String liftby, Integer start,
			Integer limit)throws Exception{
		// TODO Auto-generated method stub
        if(userid==null||userid.length()==0)throw new Exception("用户id错误");
       
		int count = countmachine(userid,toystypeid);
		int pages = ConstantUtil.pages(count, limit);
		
		List<Map<String,Object>> lstMap = new ArrayList<Map<String,Object>>();
		 
		if(count>0){
			StringBuffer query = new StringBuffer();
			if(toystypeid==""||toystypeid==null){
				 query = new StringBuffer("select mi,ti from MachineInfo mi,ToysInfo ti where mi.state >-1 and ti.id = mi.ftoysid ");
					
				if(Integer.parseInt(liftby)==0)query.append(" order by mi.popularity asc ");
				if(Integer.parseInt(liftby)==1)query.append(" order by mi.popularity desc ");
			}else{
				 query = new StringBuffer("select mi,ti from MachineInfo mi,ToysInfo ti where mi.state >-1 and ti.id = mi.ftoysid and ti.ftoystypeid = ")
							.append(Long.parseLong(toystypeid));
						if(Integer.parseInt(liftby)==0)query.append(" order by mi.popularity asc ");
						if(Integer.parseInt(liftby)==1)query.append(" order by mi.popularity desc ");
			}
			
			List<Object[]> lst = databaseHelper.getResultListByHql(query.toString(), start, limit);

			for (Object[] object : lst) {
				MachineInfo mi = (MachineInfo)object[0];
				ToysInfo ti = (ToysInfo)object[1];
				Map<String,Object> map = new HashMap<String,Object>();
				map.put("machinesid", mi.getId());
				map.put("usedstate", mi.getState());
				map.put("isnew", mi.getIsnew());
				map.put("toysname",ti.getName());
				map.put("toysphoto",ti.getPhoto());
				map.put("price",mi.getPrice());
			
				lstMap.add(map);
			}
		}
		String json = new Gson().toJson(lstMap);
		JsonArray arr = (JsonArray) new JsonParser().parse(json);
		JsonObject obj = new JsonObject();
		obj.addProperty("total",count);
		obj.addProperty("pages",pages);
		obj.add("rows", arr);
		
		return obj.toString();
	}

	private int countmachine(String userid,String toystypeid){
		StringBuffer count = new StringBuffer();
		if(toystypeid==""||toystypeid==null){
			 count = new StringBuffer("select count(mi.id) from MachineInfo mi,ToysInfo ti,ToysPhotos tp where mi.state >-1 and ti.id = mi.ftoysid and ti.id = tp.ftoysid ");
		}else{
			count = new StringBuffer("select count(mi.id) from MachineInfo mi,ToysInfo ti,ToysPhotos tp where mi.state >-1 and ti.id = mi.ftoysid and ti.id = tp.ftoysid and ti.ftoystypeid = ")
					.append(Long.parseLong(toystypeid));
		}
		
		List lst = databaseHelper.getResultListByHql(count.toString());
		return Integer.parseInt(lst.get(0).toString());
	}

	@Override
	public String machinedetail(String userid, String machinesid) throws Exception {
		// TODO Auto-generated method stub
		 if(userid==null||userid.length()==0)throw new Exception("用户id错误");
		 
		 UserInfo userInfo = (UserInfo) databaseHelper.getObjectById(UserInfo.class, Long.parseLong(userid));
		 MachineInfo machineInfo = (MachineInfo) databaseHelper.getObjectById(MachineInfo.class, Long.parseLong(machinesid));
		 
		 StringBuffer queryisused = new StringBuffer("select mu from MachineUsed mu where mu.fuserinfoid = ")
				 .append(Long.parseLong(userid)).append(" and mu.fmachineid = ").append(Long.parseLong(machinesid));
		 List<Object>muList = databaseHelper.getResultListByHql(queryisused.toString());
		 
		    Map<String,Object> map = new HashMap<String,Object>();
			map.put("msg", "success");
			map.put("info", "消息");
			map.put("facevideourl", machineInfo.getFacevideo());
			map.put("sidevideourl", machineInfo.getSidevideo());
			map.put("subscribe",machineInfo.getSubscribe());
			map.put("views", machineInfo.getViews());
			map.put("price", machineInfo.getPrice());
			map.put("userbalance",userInfo.getBalance());
            map.put("userfreevoucher", userInfo.getFreevoucher());
            if(muList.size()>0){
            	MachineUsed machineUsed = (MachineUsed) muList.get(0);
            	map.put("issubscribe", machineUsed.getState());
   		   }
            if(machineInfo.getFtoysid()!=null){
            ToysInfo toysInfo = (ToysInfo) databaseHelper.getObjectById(ToysInfo.class, machineInfo.getFtoysid());
            StringBuffer queryliketoy = new StringBuffer("select mi,t,tt from MachineInfo mi,ToysInfo t,ToysType tt where mi.ftoysid = t.id and t.ftoystypeid = tt.id and tt.id = ")
            		.append(toysInfo.getFtoystypeid()).append(" and mi.id != ").append(machinesid);
            List<Map<String,Object>> lstMap1 = new ArrayList<Map<String,Object>>();
            List<Object[]>tList = databaseHelper.getResultListByHql(queryliketoy.toString());
            for (Object[] objects : tList) {
            	MachineInfo m = (MachineInfo)objects[0];
				ToysInfo t = (ToysInfo) objects[1];
				Map<String, Object>map1 = new HashMap<String, Object>();
				map1.put("machinesid", m.getId());
				map1.put("toysname",t.getName());
				map1.put("toysphoto",t.getPhoto());
				lstMap1.add(map1);
			}
            map.put("liketoy", lstMap1);
            }
			String json = JsonUtil.getGson().toJson(map);
			
			return json;
	}

	@Override
	public String views(String userid, String machinesid) throws Exception {
		// TODO Auto-generated method stub
		 if(userid==null||userid.length()==0)throw new Exception("用户id错误");
		StringBuffer querymused = new StringBuffer("select mu from MachineUsed mu where mu.fuserinfoid = ")
				.append(Long.parseLong(userid));
		List<Object>muList = databaseHelper.getResultListByHql(querymused.toString());
		if(muList.size()==0){
			MachineUsed machineUsed = new MachineUsed();
			machineUsed.setCreatetime(new Date());
			machineUsed.setFmachineid(Long.parseLong(machinesid));
			machineUsed.setFuserinfoid(Long.parseLong(userid));
			machineUsed.setIndexs(0);
			machineUsed.setState(0);
			machineUsed.setUpdatetime(new Date());
			databaseHelper.persistObject(machineUsed);
		}
		MachineUserMark mUserMark = new MachineUserMark();
		mUserMark.setCreatetime(new Date());
		mUserMark.setFmachineid(Long.parseLong(machinesid));
		mUserMark.setFuserinfoid(Long.parseLong(userid));
		mUserMark.setType(0);
		databaseHelper.persistObject(mUserMark);
		
		MachineInfo machineInfo = (MachineInfo) databaseHelper.getObjectById(MachineInfo.class, Long.parseLong(machinesid));
		machineInfo.setViews(machineInfo.getViews()+1);
		machineInfo.setPopularity(machineInfo.getPopularity()+1);
		databaseHelper.updateObject(machineInfo);
		
		Map<String,Object>map = new HashMap<String,Object>();
		map.put("msg", "success");
		map.put("info", "进入房间");
		
		String json = JsonUtil.getGson().toJson(map);
		
		return json;
	}

	@Override
	public String exitroom(String userid, String machinesid) throws Exception {
		// TODO Auto-generated method stub
		 if(userid==null||userid.length()==0)throw new Exception("用户id错误");
		MachineInfo machineInfo = (MachineInfo) databaseHelper.getObjectById(MachineInfo.class, Long.parseLong(machinesid));
		machineInfo.setViews(machineInfo.getViews()-1);
		databaseHelper.updateObject(machineInfo);
		Map<String,Object>map = new HashMap<String,Object>();
		map.put("msg", "success");
		map.put("info", "退出房间");
		
		String json = JsonUtil.getGson().toJson(map);
		
		return json;
	}

	@Override
	public String subscribe(String userid, String machinesid) throws Exception {
		// TODO Auto-generated method stub
		 if(userid==null||userid.length()==0)throw new Exception("用户id错误");
		 StringBuffer querymused = new StringBuffer("select mu from MachineUsed mu where mu.state <1 and mu.fuserinfoid = ")
					.append(Long.parseLong(userid)).append(" and mu.fmachineid = ").append(Long.parseLong(machinesid));
			List<Object>muList = databaseHelper.getResultListByHql(querymused.toString());
			MachineInfo mi = (MachineInfo) databaseHelper.getObjectById(MachineInfo.class, Long.parseLong(machinesid));
			if(muList.size()>0){
				MachineUsed machineUsed = (MachineUsed) muList.get(0);
				machineUsed.setState(1);
				mi.setSubscribe(mi.getSubscribe()+1);
				databaseHelper.updateObject(machineUsed);
				databaseHelper.updateObject(mi);
			}else{
				MachineUsed mUsed = new MachineUsed();
				mUsed.setCreatetime(new Date());
				mUsed.setFmachineid(Long.parseLong(machinesid));
				mUsed.setFuserinfoid(Long.parseLong(userid));
				mUsed.setIndexs(mi.getSubscribe()+1);
				mi.setSubscribe(mi.getSubscribe()+1);
				databaseHelper.updateObject(mi);
				databaseHelper.persistObject(mUsed);
			}
			MachineUserMark mUserMark = new MachineUserMark();
			mUserMark.setCreatetime(new Date());
			mUserMark.setFmachineid(Long.parseLong(machinesid));
			mUserMark.setFuserinfoid(Long.parseLong(userid));
			mUserMark.setType(1);
			databaseHelper.persistObject(mUserMark);
			
			Map<String,Object>map = new HashMap<String,Object>();
			map.put("msg", "success");
			map.put("info", "预约成功");
			
			String json = JsonUtil.getGson().toJson(map);
			
			return json;
	}

	@Override
	public String cancelsubscribe(String userid, String machinesid) throws Exception {
		// TODO Auto-generated method stub
		 if(userid==null||userid.length()==0)throw new Exception("用户id错误");
		 StringBuffer querymused = new StringBuffer("select mu from MachineUsed mu where mu.fuserinfoid = ")
					.append(Long.parseLong(userid)).append(" and mu.fmachineid = ").append(Long.parseLong(machinesid));
			List<Object>muList = databaseHelper.getResultListByHql(querymused.toString());
			MachineInfo mi = (MachineInfo) databaseHelper.getObjectById(MachineInfo.class, Long.parseLong(machinesid));
			if(muList.size()>0){
				MachineUsed machineUsed = (MachineUsed) muList.get(0);
				machineUsed.setState(0);
				mi.setSubscribe(mi.getSubscribe()-1);
				databaseHelper.updateObject(machineUsed);
				databaseHelper.updateObject(mi);
			}
			
			Map<String,Object>map = new HashMap<String,Object>();
			map.put("msg", "success");
			map.put("info", "预约成功");
			
			String json = JsonUtil.getGson().toJson(map);
			
			return json;
	}
	
	@Override
	public String use(String userid, String machinesid) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String finish(String userid, String machinesid) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

}
