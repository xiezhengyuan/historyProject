package com.hxy.isw.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.hxy.isw.entity.Employee;
import com.hxy.isw.entity.FileInfo;
import com.hxy.isw.entity.MachineInfo;
import com.hxy.isw.entity.ToysInfo;
import com.hxy.isw.entity.ToysPhotos;
import com.hxy.isw.entity.ToysType;
import com.hxy.isw.service.DeviceService;
import com.hxy.isw.util.ConstantUtil;
import com.hxy.isw.util.DatabaseHelper;
import com.hxy.isw.util.JsonUtil;

@Repository
public class DeviceServiceImpl implements DeviceService {

	@Autowired
	DatabaseHelper databaseHelper;
	@Override
	public Map<String, Object> findMachineList(Employee em, String machineno, String ftoysid, Integer start,
			Integer limit)throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();

		StringBuffer sql = new StringBuffer("SELECT COUNT(1) FROM machineinfo mi WHERE 1=1 and mi.empid=").append(em.getId());
		StringBuffer hql = new StringBuffer("SELECT mi FROM MachineInfo mi WHERE 1=1 and mi.empid=").append(em.getId());

		if (!StringUtils.isEmpty(machineno)) {
			sql.append(" AND mi.machineno LIKE '%").append(machineno).append("%'");
			hql.append(" AND mi.machineno LIKE '%").append(machineno).append("%'");
		}
		if (!StringUtils.isEmpty(ftoysid) && !ftoysid.equals("0")) {
			sql.append(" AND mi.ftoysid=").append(ftoysid);
			hql.append(" AND mi.ftoysid=").append(ftoysid);
		}

		Integer count = databaseHelper.getSqlCount(sql.toString());
		int pages = ConstantUtil.pages(count, limit);
		resultMap.put("pages", pages);

		// StringBuffer hql = new StringBuffer("SELECT mi,ti FROM MachineInfo
		// mi,ToysInfo ti WHERE mi.ftoysid=ti.id");

		List<Object> resultList = databaseHelper.getResultListByHql(hql.toString(), start, limit);
		for (Object objects : resultList) {
			MachineInfo mi = (MachineInfo) objects;
			// ToysInfo ti = (ToysInfo) objects[1];
			Map<String, Object> map = new HashMap<String, Object>();
			if (mi.getFtoysid() != null) {
				ToysInfo toysInfo = (ToysInfo) databaseHelper.getObjectById(ToysInfo.class, mi.getFtoysid());
				map.put("toysname", toysInfo.getName());
			} else {
				map.put("toysname", "");
			}
			map.put("id", mi.getId());
			map.put("machineno", mi.getMachineno());// 设备编号
			map.put("ftoysid", mi.getFtoysid());// 玩具ID
			map.put("price", mi.getPrice());// 玩具价格（没有绑定则为0）
			map.put("popularity", mi.getPopularity());// 人气（没有绑定则为0）
			map.put("createtime", mi.getCreatetime().toString());
			map.put("state", mi.getState());// -1失效 0空闲 1正在使用
			map.put("isnew", mi.getIsnew());// 是否上新 0否 1是
			map.put("facevideo", mi.getFacevideo());// 正面直播流地址
			map.put("sidevideo", mi.getSidevideo());// 侧面直播流地址
			map.put("views", mi.getViews());// 观看人数
			map.put("subscribe", mi.getSubscribe());// 预约人数
			map.put("stock", mi.getStock());// 玩具数量（没有绑定则为0）
			// map.put("toysname", ti.getName());
			list.add(map);
		}
		resultMap.put("list", list);
		return resultMap;
	}
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void bindToys(Employee em, MachineInfo machineInfo) throws Exception {
		ToysInfo toysInfo = (ToysInfo) databaseHelper.getObjectById(ToysInfo.class, machineInfo.getFtoysid());
		MachineInfo mi = (MachineInfo) databaseHelper.getObjectById(MachineInfo.class, machineInfo.getId());
		mi.setEmpid(em.getId());
		mi.setFtoysid(toysInfo.getId());
		mi.setPrice(toysInfo.getPrice());
		mi.setIsnew(machineInfo.getIsnew());
		mi.setStock(machineInfo.getStock());
		mi.setFacevideo(machineInfo.getFacevideo());
		mi.setSidevideo(machineInfo.getSidevideo());
		databaseHelper.updateObject(mi);
	}
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void addmachine(Employee em,String addmachineid) throws Exception {

		StringBuffer sql = new StringBuffer("SELECT COUNT(1) FROM machineinfo mi WHERE mi.machineno='")
				.append(addmachineid + "'");
		Integer count = databaseHelper.getSqlCount(sql.toString());
		if (count > 0) {
			throw new Exception("该编号已存在");
		}
		MachineInfo machineInfo=new MachineInfo();
		machineInfo.setState(0);
		machineInfo.setMachineno(addmachineid);
		machineInfo.setCreatetime(new Date());
		machineInfo.setEmpid(em.getId());
		databaseHelper.persistObject(machineInfo);
	}
	
	@Override
	public Map<String, Object> findAlltoys(Employee em)throws Exception {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		Map<String, Object> map = new HashMap<String, Object>();
		StringBuffer hql = new StringBuffer("SELECT ti FROM ToysInfo ti WHERE ti.state=0 and ti.empid=").append(em.getId());
		List resultList = databaseHelper.getResultListByHql(hql.toString());

		for (Object object : resultList) {
			ToysInfo toysInfo = (ToysInfo) object;
			list.add(JsonUtil.obj2map(toysInfo));
		}
		map.put("rows", list);
		return map;
	}

	@Override
	public Map<String, Object> findAlltoysType(Employee em)throws Exception {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		Map<String, Object> map = new HashMap<String, Object>();
		StringBuffer hql = new StringBuffer("SELECT tt FROM ToysType tt WHERE tt.state=0 and tt.empid=").append(em.getId());
		List<Object> resultList = databaseHelper.getResultListByHql(hql.toString());
		for (Object object : resultList) {
			ToysType tt = (ToysType) object;
			list.add(JsonUtil.obj2map(tt));
		}
		map.put("rows", list);
		map.put("op", "success");
		map.put("msg", "");
		return map;
	}
	
	@Override
	public Map<String, Object> toysInfoList(Employee em, int start, int limit, String name, String ftoystypeid)throws Exception {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		Map<String, Object> resultMap = new HashMap<String, Object>();
		StringBuffer sql = new StringBuffer("SELECT COUNT(1) FROM toysinfo ti WHERE ti.state=0 and ti.empid=").append(em.getId());
		StringBuffer hql = new StringBuffer(
				"SELECT ti,tt FROM ToysInfo ti,ToysType tt WHERE ti.state=0 AND ti.ftoystypeid=tt.id and ti.empid=").append(em.getId());
		if (!StringUtils.isEmpty(name)) {
			sql.append(" AND ti.name LIKE '%").append(name).append("%'");
			hql.append(" AND ti.name LIKE '%").append(name).append("%'");
		}
		if (!StringUtils.isEmpty(ftoystypeid) && !ftoystypeid.equals("0")) {
			sql.append(" AND ti.ftoystypeid=").append(ftoystypeid);
			hql.append(" AND ti.ftoystypeid=").append(ftoystypeid);
		}

		Integer count = databaseHelper.getSqlCount(sql.toString());
		Integer pages = ConstantUtil.pages(count, limit);
		resultMap.put("pages", pages);

		List<Object[]> resultList = databaseHelper.getResultListByHql(hql.append(" ORDER BY ti.createtime DESC").toString(), start, limit);
		for (Object[] object : resultList) {
			Map<String, Object> map = new HashMap<String, Object>();
			ToysInfo toysInfo = (ToysInfo) object[0];
			ToysType toysType = (ToysType) object[1];
			map = JsonUtil.obj2map(toysInfo);
			map.put("toystype", toysType.getName());
			list.add(map);
		}
		resultMap.put("rows", list);
		return resultMap;
	}
	
	
	
	@Override
	public Map<String, Object> toysTypeList(Employee em, int start, int limit, String name) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		Map<String, Object> resultMap = new HashMap<String, Object>();

		StringBuffer sql = new StringBuffer("SELECT COUNT(1) FROM toystype tt WHERE tt.state=0 and tt.empid=").append(em.getId());
		Integer count = databaseHelper.getSqlCount(sql.toString());
		int pages = ConstantUtil.pages(count, limit);
		resultMap.put("pages", pages);

		StringBuffer hql = new StringBuffer("SELECT tt FROM ToysType tt WHERE tt.state=0 and tt.empid=").append(em.getId());

		List resultList = databaseHelper.getResultListByHql(StringUtils.isEmpty(name) ? hql.toString()
				: hql.append("AND tt.name LIKE '%").append(name).append("%'").toString(), start, limit);
		for (Object object : resultList) {
			ToysType tt = (ToysType) object;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", tt.getId());
			map.put("name", tt.getName());
			map.put("createtime", tt.getCreatetime());
			map.put("state", tt.getState());
			list.add(map);
		}
		resultMap.put("rows", list);
		return resultMap;
	}

	
	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void addToys(ToysInfo toysInfo, String imgarr,Employee em) {

		if (toysInfo.getId() == null) {
			// 添加玩具表
			toysInfo.setEmpid(em.getId());
			databaseHelper.persistObject(toysInfo);

			JsonArray arr = (JsonArray) JsonUtil.getJsonParser().parse(imgarr);
			// 添加玩具图片表
			for (JsonElement jsonElement : arr) {
				JsonObject jsonObject = jsonElement.getAsJsonObject();
				Long id = jsonObject.get("id").getAsLong();
				String url = jsonObject.get("url").getAsString();
				String name = jsonObject.get("name").getAsString();

				ToysPhotos toysPhotos = new ToysPhotos();
				toysPhotos.setFtoysid(toysInfo.getId());
				toysPhotos.setFfileinfoid(id);
				toysPhotos.setPhotourl(url);
				toysPhotos.setState(0);
				toysPhotos.setCreatetime(new Date());
				databaseHelper.persistObject(toysPhotos);

				// 修改图片表引用状态
				FileInfo fileInfo = (FileInfo) databaseHelper.getObjectById(FileInfo.class, id);
				fileInfo.setState(1);
				databaseHelper.updateObject(fileInfo);

			}

		} else {
			// 修改
			toysInfo.setEmpid(em.getId());
			databaseHelper.updateObject(toysInfo);
			
			JsonArray arr = (JsonArray) JsonUtil.getJsonParser().parse(imgarr);

			StringBuffer hql = new StringBuffer("SELECT tp FROM ToysPhotos tp WHERE tp.state=0 AND tp.ftoysid=")
					.append(toysInfo.getId());
			// 失效
			StringBuffer sqlfileinfo1 = new StringBuffer("UPDATE fileinfo fi SET fi.state=-1 WHERE 1=1");
			StringBuffer sqltoysphotos1 = new StringBuffer("UPDATE toysphotos tp SET tp.state=-1 WHERE 1=1");
			
			//所有玩具图片集合
			List<Object> resultList = databaseHelper.getResultListByHql(hql.toString());
			for (Object object : resultList) {
				ToysPhotos photos = (ToysPhotos) object;
				/* 修改fileinfo表图片状态 为失效 */
				databaseHelper.executeNativeSql(
						sqlfileinfo1.append(" AND fi.id=").append(photos.getFfileinfoid()).toString());
			}
			/* 修改toysphotos表图片状态 为失效 */
			databaseHelper
					.executeNativeSql(sqltoysphotos1.append(" AND tp.ftoysid=").append(toysInfo.getId()).toString());

			// 生效
			StringBuffer sqlfileinfo2 = new StringBuffer("UPDATE fileinfo fi SET fi.state=1 WHERE 1=1");
			StringBuffer sqltoysphotos2 = new StringBuffer("UPDATE toysphotos tp SET tp.state=0 WHERE 1=1");
			// 是否存在
			StringBuffer sqlexist = new StringBuffer("SELECT COUNT(1) FROM toysphotos tp WHERE 1=1");

			for (JsonElement jsonElement : arr) {
				JsonObject jsonObject = jsonElement.getAsJsonObject();
				Long id = jsonObject.get("id").getAsLong();
				String url = jsonObject.get("url").getAsString();
				String name = jsonObject.get("name").getAsString();

				int count = databaseHelper.getSqlCount(
						sqlexist.append(" AND tp.ftoysid=").append(toysInfo.getId()).append(" AND tp.ffileinfoid=")
								.append(id).append(" AND tp.photourl='").append(url).append("'").toString());
				if(count>0){
					//如果之前已经存在过  修改状态
					databaseHelper.executeNativeSql(sqlfileinfo2.append(" AND fi.id=").append(id).toString());
					databaseHelper.executeNativeSql(sqltoysphotos2.append(" AND tp.ffileinfoid=").append(id).toString());
				}else{
					//否则新增
					ToysPhotos toysPhotos = new ToysPhotos();
					toysPhotos.setFtoysid(toysInfo.getId());
					toysPhotos.setFfileinfoid(id);
					toysPhotos.setPhotourl(url);
					toysPhotos.setState(0);
					toysPhotos.setCreatetime(new Date());
					databaseHelper.persistObject(toysPhotos);

					// 修改图片表引用状态
					FileInfo fileInfo = (FileInfo) databaseHelper.getObjectById(FileInfo.class, id);
					fileInfo.setState(1);
					databaseHelper.updateObject(fileInfo);
				}
			}
		}

	}
	

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void addToysType(Employee em, ToysType tt) throws Exception {
		StringBuffer sql;
		if (tt.getId() == null) {
			sql = new StringBuffer("SELECT COUNT(1) FROM toystype tt WHERE tt.name='").append(tt.getName())
					.append("' AND tt.state=0").append(" and tt.empid=").append(em.getId());

			Integer sqlCount = databaseHelper.getSqlCount(sql.toString());
			if (sqlCount > 0) {
				throw new NullPointerException("该分类已存在");
			}

			ToysType toysType = new ToysType();
			toysType.setEmpid(em.getId());
			toysType.setName(tt.getName());
			toysType.setCreatetime(new Date());
			toysType.setState(0);
			databaseHelper.persistObject(toysType);
		} else {
			sql = new StringBuffer("SELECT COUNT(1) FROM toystype tt WHERE tt.name='").append(tt.getName())
					.append("' AND tt.state=0 AND tt.id!= ").append(tt.getId()).append(" and tt.empid=").append(em.getId());
			Integer sqlCount = databaseHelper.getSqlCount(sql.toString());
			if (sqlCount > 0) {
				throw new NullPointerException("该分类已存在");
			}

			ToysType toysType = (ToysType) databaseHelper.getObjectById(ToysType.class, tt.getId());
			toysType.setName(tt.getName());
			databaseHelper.updateObject(toysType);
		}

	}
}
