package com.hxy.isw.service.impl;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.google.gson.JsonArray;
import com.hxy.isw.entity.DeliveryApply;
import com.hxy.isw.entity.Employee;
import com.hxy.isw.entity.Expressage;
import com.hxy.isw.entity.ExpressageInfo;

import com.hxy.isw.entity.Giftbox;

import com.hxy.isw.service.DeliveryapplyService;
import com.hxy.isw.util.ConstantUtil;
import com.hxy.isw.util.DatabaseHelper;
import com.hxy.isw.util.JsonUtil;
import com.hxy.isw.util.KdniaoTrackQueryAPI;

@Repository
public class DeliveryapplyServiceImpl implements DeliveryapplyService {

	@Autowired
	DatabaseHelper databaseHelper;
	@Override
	public Map<String, Object> searchDeliveryapply(Integer start, String keyword,Integer limit) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		
		StringBuffer buffer = new StringBuffer("Select count(g.id) From DeliveryApply d,Giftbox g where d.fgiftboxid=g.id order by g.createtime DESC");
		int records = Integer.parseInt(databaseHelper.getResultListByHql(buffer.toString()).get(0).toString());
		//System.out.println(count);
		int total = ConstantUtil.pages(records, limit);
		if(records>0){
			StringBuffer hql = new StringBuffer("Select d,g From DeliveryApply d,Giftbox g where d.fgiftboxid=g.id and d.state=0 ")
					.append(" and d.consigneename like '%").append(keyword).append("%'");
			
			List<Object[]> lst = databaseHelper.getResultListByHql(hql.toString(),start,limit);
			
			for (Object[] objects : lst){
				DeliveryApply apply=(DeliveryApply) objects[0];
				Giftbox giftbox = (Giftbox) objects[1];
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("id", apply.getId());
				map.put("toysname", giftbox.getToysname());
				map.put("consigneename", apply.getConsigneename());
				map.put("consigneemobile", apply.getConsigneemobile());
				map.put("address", apply.getAddress());
				map.put("getphoto", giftbox.getPhoto());
				rowList.add(map);
			}
		}
		resultMap.put("total", total);
		resultMap.put("records", records);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public JsonArray queryexpressage() throws Exception {
		StringBuffer queryexpressage = new StringBuffer("select expr from Expressage expr where expr.state = 0");
		List<Object>eList = databaseHelper.getResultListByHql(queryexpressage.toString());
		return JsonUtil.castLst2Arr4SingleTime(eList);
		
	}
	@Override
	public void addexpressageinfo(ExpressageInfo expressageinfo,String expressageno,String deliveryapplyid)
			throws Exception {
		
//		System.out.println(expressageinfo.getExpressagecompany()+"xxzzyyz");
//		System.out.println(expressageinfo.toString());
//		StringBuffer queryexpressage = new StringBuffer("select e from ExpressageInfo e  where e.expressagecompany = '").append(expressageinfo.getExpressagecompany()).append("'");
//		List<Object>eList = databaseHelper.getResultListByHql(queryexpressage.toString());
//		if(eList.size()>0){
//			expressageinfo2 = (ExpressageInfo) eList.get(0);
//			
//		}
		Expressage exp = new Expressage();
		StringBuffer ex = new StringBuffer("select e from Expressage e where e.expressagecompany = '").append(expressageinfo.getExpressagecompany()).append("'");
		List<Object> eList1 = databaseHelper.getResultListByHql(ex.toString());
		
		if(eList1.size()>0){
			exp= (Expressage)eList1.get(0);
		}
		DeliveryApply deliverapply = new DeliveryApply();
		int id = Integer.parseInt(deliveryapplyid);
		System.out.println(expressageno);
		StringBuffer buffer = new StringBuffer("select d from DeliveryApply d where d.id = '").append(id).append("'");
		List<Object> dList=databaseHelper.getResultListByHql(buffer.toString());
		if(dList.size()>0){
			deliverapply=(DeliveryApply) dList.get(0);
		}
		ExpressageInfo expressageinfo2 = new ExpressageInfo();
		expressageinfo2.setFgiftboxid(deliverapply.getFgiftboxid());
		expressageinfo2.setFdeliveryapplyid(deliverapply.getId());
		expressageinfo2.setExpressagecompany(expressageinfo.getExpressagecompany());
		expressageinfo2.setExpressagecode(exp.getExpressagecode());
		expressageinfo2.setExpressageno(expressageinfo.getExpressageno());
		expressageinfo2.setCreatetime(new Date());
		databaseHelper.persistObject(expressageinfo2);
		DeliveryApply deliverapply2 = (DeliveryApply) databaseHelper.getObjectById(DeliveryApply.class, deliverapply.getId());
		deliverapply2.setState(1);
		databaseHelper.updateObject(deliverapply2);
		
	}
	@Override
	public Map<String, Object> queryexpressageinfo(Employee bi, String keyword, int start, int limit, int state) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> rowList = new ArrayList<Map<String, Object>>();
		StringBuffer buffer = new StringBuffer("select count(e) from ExpressageInfo e,DeliveryApply d,Giftbox g where e.fdeliveryapplyid=d.id and e.fgiftboxid=g.id and d.state>0");
		int count = Integer.parseInt(databaseHelper.getResultListByHql(buffer.toString()).get(0).toString());
		
		int pages = ConstantUtil.pages(count, limit);
		
		if(count>0){
			StringBuffer hql = new StringBuffer("select e,d,g from ExpressageInfo e,DeliveryApply d,Giftbox g where e.fdeliveryapplyid=d.id and e.fgiftboxid=g.id and d.state>0")
					.append(" and e.expressageno like '%").append(keyword).append("%'");
					
			
			List<Object[]> lst=databaseHelper.getResultListByHql(hql.toString());
			for (Object[] objects : lst){
				ExpressageInfo expressageInfo=(ExpressageInfo) objects[0];
				DeliveryApply deliveryApply=(DeliveryApply) objects[1];
				Giftbox giftbox=(Giftbox) objects[2];
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("id", expressageInfo.getId());
				map.put("orderno", expressageInfo.getExpressageno());
				map.put("toysname", giftbox.getToysname());
				map.put("consigneename", deliveryApply.getConsigneename());
				map.put("consigneemobile", deliveryApply.getConsigneemobile());
				rowList.add(map);
			}
		}
		resultMap.put("total", count);
		resultMap.put("pages", pages);
		resultMap.put("rows", rowList);
		
		return resultMap;
	}
	@Override
	public String queryexpressagedetail(String id) throws Exception {
		// TODO Auto-generated method stub
				//查看订单是否已发货
		
		ExpressageInfo oi = (ExpressageInfo)databaseHelper.getObjectById(ExpressageInfo.class, Long.parseLong(id));
				if(oi==null)throw new Exception("订单信息错误");
				
				
				//查看订单物流
				String hql = "select expressageinfo from  ExpressageInfo expressageinfo where expressageinfo.state = 1 and expressageinfo.id="+Long.parseLong(id);
				List<Object> lst = databaseHelper.getResultListByHql(hql);
				if(lst.size()==0)throw new Exception("发货人未填写物流信息");
				
				ExpressageInfo expressageinfo = (ExpressageInfo)lst.get(0);
				String result = "";
				
				KdniaoTrackQueryAPI api = new KdniaoTrackQueryAPI();
				result = api.getOrderTracesByJson(expressageinfo.getExpressagecode(), expressageinfo.getExpressageno());
				return result;
	}
	

}
